// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/blob/v1/server.proto

package v1connect

import (
	v1 "blob/gen/blob/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BlobServiceName is the fully-qualified name of the BlobService service.
	BlobServiceName = "blob.v1.BlobService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BlobServiceCreateBucketProcedure is the fully-qualified name of the BlobService's CreateBucket
	// RPC.
	BlobServiceCreateBucketProcedure = "/blob.v1.BlobService/CreateBucket"
	// BlobServiceListBucketsProcedure is the fully-qualified name of the BlobService's ListBuckets RPC.
	BlobServiceListBucketsProcedure = "/blob.v1.BlobService/ListBuckets"
	// BlobServiceDeleteBucketProcedure is the fully-qualified name of the BlobService's DeleteBucket
	// RPC.
	BlobServiceDeleteBucketProcedure = "/blob.v1.BlobService/DeleteBucket"
	// BlobServiceUpdateBucketProcedure is the fully-qualified name of the BlobService's UpdateBucket
	// RPC.
	BlobServiceUpdateBucketProcedure = "/blob.v1.BlobService/UpdateBucket"
	// BlobServiceCreateRuleProcedure is the fully-qualified name of the BlobService's CreateRule RPC.
	BlobServiceCreateRuleProcedure = "/blob.v1.BlobService/CreateRule"
	// BlobServiceListRulesProcedure is the fully-qualified name of the BlobService's ListRules RPC.
	BlobServiceListRulesProcedure = "/blob.v1.BlobService/ListRules"
	// BlobServiceUpdateRuleProcedure is the fully-qualified name of the BlobService's UpdateRule RPC.
	BlobServiceUpdateRuleProcedure = "/blob.v1.BlobService/UpdateRule"
	// BlobServiceDeleteRuleProcedure is the fully-qualified name of the BlobService's DeleteRule RPC.
	BlobServiceDeleteRuleProcedure = "/blob.v1.BlobService/DeleteRule"
	// BlobServiceCreateObjectProcedure is the fully-qualified name of the BlobService's CreateObject
	// RPC.
	BlobServiceCreateObjectProcedure = "/blob.v1.BlobService/CreateObject"
	// BlobServiceListObjectsProcedure is the fully-qualified name of the BlobService's ListObjects RPC.
	BlobServiceListObjectsProcedure = "/blob.v1.BlobService/ListObjects"
	// BlobServiceDeleteObjectProcedure is the fully-qualified name of the BlobService's DeleteObject
	// RPC.
	BlobServiceDeleteObjectProcedure = "/blob.v1.BlobService/DeleteObject"
	// BlobServiceUpdateObjectProcedure is the fully-qualified name of the BlobService's UpdateObject
	// RPC.
	BlobServiceUpdateObjectProcedure = "/blob.v1.BlobService/UpdateObject"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	blobServiceServiceDescriptor            = v1.File_proto_blob_v1_server_proto.Services().ByName("BlobService")
	blobServiceCreateBucketMethodDescriptor = blobServiceServiceDescriptor.Methods().ByName("CreateBucket")
	blobServiceListBucketsMethodDescriptor  = blobServiceServiceDescriptor.Methods().ByName("ListBuckets")
	blobServiceDeleteBucketMethodDescriptor = blobServiceServiceDescriptor.Methods().ByName("DeleteBucket")
	blobServiceUpdateBucketMethodDescriptor = blobServiceServiceDescriptor.Methods().ByName("UpdateBucket")
	blobServiceCreateRuleMethodDescriptor   = blobServiceServiceDescriptor.Methods().ByName("CreateRule")
	blobServiceListRulesMethodDescriptor    = blobServiceServiceDescriptor.Methods().ByName("ListRules")
	blobServiceUpdateRuleMethodDescriptor   = blobServiceServiceDescriptor.Methods().ByName("UpdateRule")
	blobServiceDeleteRuleMethodDescriptor   = blobServiceServiceDescriptor.Methods().ByName("DeleteRule")
	blobServiceCreateObjectMethodDescriptor = blobServiceServiceDescriptor.Methods().ByName("CreateObject")
	blobServiceListObjectsMethodDescriptor  = blobServiceServiceDescriptor.Methods().ByName("ListObjects")
	blobServiceDeleteObjectMethodDescriptor = blobServiceServiceDescriptor.Methods().ByName("DeleteObject")
	blobServiceUpdateObjectMethodDescriptor = blobServiceServiceDescriptor.Methods().ByName("UpdateObject")
)

// BlobServiceClient is a client for the blob.v1.BlobService service.
type BlobServiceClient interface {
	// Bucket management
	CreateBucket(context.Context, *connect.Request[v1.CreateBucketRequest]) (*connect.Response[v1.CreateBucketResponse], error)
	ListBuckets(context.Context, *connect.Request[v1.ListBucketsRequest]) (*connect.Response[v1.ListBucketsResponse], error)
	DeleteBucket(context.Context, *connect.Request[v1.DeleteBucketRequest]) (*connect.Response[v1.DeleteBucketResponse], error)
	UpdateBucket(context.Context, *connect.Request[v1.UpdateBucketRequest]) (*connect.Response[v1.UpdateBucketResponse], error)
	// Rules management
	CreateRule(context.Context, *connect.Request[v1.CreateRuleRequest]) (*connect.Response[v1.CreateRuleResponse], error)
	ListRules(context.Context, *connect.Request[v1.ListRulesRequest]) (*connect.Response[v1.ListRulesResponse], error)
	UpdateRule(context.Context, *connect.Request[v1.UpdateRuleRequest]) (*connect.Response[v1.UpdateRuleResponse], error)
	DeleteRule(context.Context, *connect.Request[v1.DeleteRuleRequest]) (*connect.Response[v1.DeleteRuleResponse], error)
	// Object management
	CreateObject(context.Context, *connect.Request[v1.CreateObjectRequest]) (*connect.Response[v1.CreateObjectResponse], error)
	ListObjects(context.Context, *connect.Request[v1.ListObjectsRequest]) (*connect.Response[v1.ListObjectsResponse], error)
	DeleteObject(context.Context, *connect.Request[v1.DeleteObjectRequest]) (*connect.Response[v1.DeleteObjectResponse], error)
	UpdateObject(context.Context, *connect.Request[v1.UpdateObjectRequest]) (*connect.Response[v1.UpdateObjectResponse], error)
}

// NewBlobServiceClient constructs a client for the blob.v1.BlobService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBlobServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BlobServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &blobServiceClient{
		createBucket: connect.NewClient[v1.CreateBucketRequest, v1.CreateBucketResponse](
			httpClient,
			baseURL+BlobServiceCreateBucketProcedure,
			connect.WithSchema(blobServiceCreateBucketMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listBuckets: connect.NewClient[v1.ListBucketsRequest, v1.ListBucketsResponse](
			httpClient,
			baseURL+BlobServiceListBucketsProcedure,
			connect.WithSchema(blobServiceListBucketsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteBucket: connect.NewClient[v1.DeleteBucketRequest, v1.DeleteBucketResponse](
			httpClient,
			baseURL+BlobServiceDeleteBucketProcedure,
			connect.WithSchema(blobServiceDeleteBucketMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateBucket: connect.NewClient[v1.UpdateBucketRequest, v1.UpdateBucketResponse](
			httpClient,
			baseURL+BlobServiceUpdateBucketProcedure,
			connect.WithSchema(blobServiceUpdateBucketMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRule: connect.NewClient[v1.CreateRuleRequest, v1.CreateRuleResponse](
			httpClient,
			baseURL+BlobServiceCreateRuleProcedure,
			connect.WithSchema(blobServiceCreateRuleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRules: connect.NewClient[v1.ListRulesRequest, v1.ListRulesResponse](
			httpClient,
			baseURL+BlobServiceListRulesProcedure,
			connect.WithSchema(blobServiceListRulesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRule: connect.NewClient[v1.UpdateRuleRequest, v1.UpdateRuleResponse](
			httpClient,
			baseURL+BlobServiceUpdateRuleProcedure,
			connect.WithSchema(blobServiceUpdateRuleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRule: connect.NewClient[v1.DeleteRuleRequest, v1.DeleteRuleResponse](
			httpClient,
			baseURL+BlobServiceDeleteRuleProcedure,
			connect.WithSchema(blobServiceDeleteRuleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createObject: connect.NewClient[v1.CreateObjectRequest, v1.CreateObjectResponse](
			httpClient,
			baseURL+BlobServiceCreateObjectProcedure,
			connect.WithSchema(blobServiceCreateObjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listObjects: connect.NewClient[v1.ListObjectsRequest, v1.ListObjectsResponse](
			httpClient,
			baseURL+BlobServiceListObjectsProcedure,
			connect.WithSchema(blobServiceListObjectsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteObject: connect.NewClient[v1.DeleteObjectRequest, v1.DeleteObjectResponse](
			httpClient,
			baseURL+BlobServiceDeleteObjectProcedure,
			connect.WithSchema(blobServiceDeleteObjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateObject: connect.NewClient[v1.UpdateObjectRequest, v1.UpdateObjectResponse](
			httpClient,
			baseURL+BlobServiceUpdateObjectProcedure,
			connect.WithSchema(blobServiceUpdateObjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// blobServiceClient implements BlobServiceClient.
type blobServiceClient struct {
	createBucket *connect.Client[v1.CreateBucketRequest, v1.CreateBucketResponse]
	listBuckets  *connect.Client[v1.ListBucketsRequest, v1.ListBucketsResponse]
	deleteBucket *connect.Client[v1.DeleteBucketRequest, v1.DeleteBucketResponse]
	updateBucket *connect.Client[v1.UpdateBucketRequest, v1.UpdateBucketResponse]
	createRule   *connect.Client[v1.CreateRuleRequest, v1.CreateRuleResponse]
	listRules    *connect.Client[v1.ListRulesRequest, v1.ListRulesResponse]
	updateRule   *connect.Client[v1.UpdateRuleRequest, v1.UpdateRuleResponse]
	deleteRule   *connect.Client[v1.DeleteRuleRequest, v1.DeleteRuleResponse]
	createObject *connect.Client[v1.CreateObjectRequest, v1.CreateObjectResponse]
	listObjects  *connect.Client[v1.ListObjectsRequest, v1.ListObjectsResponse]
	deleteObject *connect.Client[v1.DeleteObjectRequest, v1.DeleteObjectResponse]
	updateObject *connect.Client[v1.UpdateObjectRequest, v1.UpdateObjectResponse]
}

// CreateBucket calls blob.v1.BlobService.CreateBucket.
func (c *blobServiceClient) CreateBucket(ctx context.Context, req *connect.Request[v1.CreateBucketRequest]) (*connect.Response[v1.CreateBucketResponse], error) {
	return c.createBucket.CallUnary(ctx, req)
}

// ListBuckets calls blob.v1.BlobService.ListBuckets.
func (c *blobServiceClient) ListBuckets(ctx context.Context, req *connect.Request[v1.ListBucketsRequest]) (*connect.Response[v1.ListBucketsResponse], error) {
	return c.listBuckets.CallUnary(ctx, req)
}

// DeleteBucket calls blob.v1.BlobService.DeleteBucket.
func (c *blobServiceClient) DeleteBucket(ctx context.Context, req *connect.Request[v1.DeleteBucketRequest]) (*connect.Response[v1.DeleteBucketResponse], error) {
	return c.deleteBucket.CallUnary(ctx, req)
}

// UpdateBucket calls blob.v1.BlobService.UpdateBucket.
func (c *blobServiceClient) UpdateBucket(ctx context.Context, req *connect.Request[v1.UpdateBucketRequest]) (*connect.Response[v1.UpdateBucketResponse], error) {
	return c.updateBucket.CallUnary(ctx, req)
}

// CreateRule calls blob.v1.BlobService.CreateRule.
func (c *blobServiceClient) CreateRule(ctx context.Context, req *connect.Request[v1.CreateRuleRequest]) (*connect.Response[v1.CreateRuleResponse], error) {
	return c.createRule.CallUnary(ctx, req)
}

// ListRules calls blob.v1.BlobService.ListRules.
func (c *blobServiceClient) ListRules(ctx context.Context, req *connect.Request[v1.ListRulesRequest]) (*connect.Response[v1.ListRulesResponse], error) {
	return c.listRules.CallUnary(ctx, req)
}

// UpdateRule calls blob.v1.BlobService.UpdateRule.
func (c *blobServiceClient) UpdateRule(ctx context.Context, req *connect.Request[v1.UpdateRuleRequest]) (*connect.Response[v1.UpdateRuleResponse], error) {
	return c.updateRule.CallUnary(ctx, req)
}

// DeleteRule calls blob.v1.BlobService.DeleteRule.
func (c *blobServiceClient) DeleteRule(ctx context.Context, req *connect.Request[v1.DeleteRuleRequest]) (*connect.Response[v1.DeleteRuleResponse], error) {
	return c.deleteRule.CallUnary(ctx, req)
}

// CreateObject calls blob.v1.BlobService.CreateObject.
func (c *blobServiceClient) CreateObject(ctx context.Context, req *connect.Request[v1.CreateObjectRequest]) (*connect.Response[v1.CreateObjectResponse], error) {
	return c.createObject.CallUnary(ctx, req)
}

// ListObjects calls blob.v1.BlobService.ListObjects.
func (c *blobServiceClient) ListObjects(ctx context.Context, req *connect.Request[v1.ListObjectsRequest]) (*connect.Response[v1.ListObjectsResponse], error) {
	return c.listObjects.CallUnary(ctx, req)
}

// DeleteObject calls blob.v1.BlobService.DeleteObject.
func (c *blobServiceClient) DeleteObject(ctx context.Context, req *connect.Request[v1.DeleteObjectRequest]) (*connect.Response[v1.DeleteObjectResponse], error) {
	return c.deleteObject.CallUnary(ctx, req)
}

// UpdateObject calls blob.v1.BlobService.UpdateObject.
func (c *blobServiceClient) UpdateObject(ctx context.Context, req *connect.Request[v1.UpdateObjectRequest]) (*connect.Response[v1.UpdateObjectResponse], error) {
	return c.updateObject.CallUnary(ctx, req)
}

// BlobServiceHandler is an implementation of the blob.v1.BlobService service.
type BlobServiceHandler interface {
	// Bucket management
	CreateBucket(context.Context, *connect.Request[v1.CreateBucketRequest]) (*connect.Response[v1.CreateBucketResponse], error)
	ListBuckets(context.Context, *connect.Request[v1.ListBucketsRequest]) (*connect.Response[v1.ListBucketsResponse], error)
	DeleteBucket(context.Context, *connect.Request[v1.DeleteBucketRequest]) (*connect.Response[v1.DeleteBucketResponse], error)
	UpdateBucket(context.Context, *connect.Request[v1.UpdateBucketRequest]) (*connect.Response[v1.UpdateBucketResponse], error)
	// Rules management
	CreateRule(context.Context, *connect.Request[v1.CreateRuleRequest]) (*connect.Response[v1.CreateRuleResponse], error)
	ListRules(context.Context, *connect.Request[v1.ListRulesRequest]) (*connect.Response[v1.ListRulesResponse], error)
	UpdateRule(context.Context, *connect.Request[v1.UpdateRuleRequest]) (*connect.Response[v1.UpdateRuleResponse], error)
	DeleteRule(context.Context, *connect.Request[v1.DeleteRuleRequest]) (*connect.Response[v1.DeleteRuleResponse], error)
	// Object management
	CreateObject(context.Context, *connect.Request[v1.CreateObjectRequest]) (*connect.Response[v1.CreateObjectResponse], error)
	ListObjects(context.Context, *connect.Request[v1.ListObjectsRequest]) (*connect.Response[v1.ListObjectsResponse], error)
	DeleteObject(context.Context, *connect.Request[v1.DeleteObjectRequest]) (*connect.Response[v1.DeleteObjectResponse], error)
	UpdateObject(context.Context, *connect.Request[v1.UpdateObjectRequest]) (*connect.Response[v1.UpdateObjectResponse], error)
}

// NewBlobServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBlobServiceHandler(svc BlobServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	blobServiceCreateBucketHandler := connect.NewUnaryHandler(
		BlobServiceCreateBucketProcedure,
		svc.CreateBucket,
		connect.WithSchema(blobServiceCreateBucketMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceListBucketsHandler := connect.NewUnaryHandler(
		BlobServiceListBucketsProcedure,
		svc.ListBuckets,
		connect.WithSchema(blobServiceListBucketsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceDeleteBucketHandler := connect.NewUnaryHandler(
		BlobServiceDeleteBucketProcedure,
		svc.DeleteBucket,
		connect.WithSchema(blobServiceDeleteBucketMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceUpdateBucketHandler := connect.NewUnaryHandler(
		BlobServiceUpdateBucketProcedure,
		svc.UpdateBucket,
		connect.WithSchema(blobServiceUpdateBucketMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceCreateRuleHandler := connect.NewUnaryHandler(
		BlobServiceCreateRuleProcedure,
		svc.CreateRule,
		connect.WithSchema(blobServiceCreateRuleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceListRulesHandler := connect.NewUnaryHandler(
		BlobServiceListRulesProcedure,
		svc.ListRules,
		connect.WithSchema(blobServiceListRulesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceUpdateRuleHandler := connect.NewUnaryHandler(
		BlobServiceUpdateRuleProcedure,
		svc.UpdateRule,
		connect.WithSchema(blobServiceUpdateRuleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceDeleteRuleHandler := connect.NewUnaryHandler(
		BlobServiceDeleteRuleProcedure,
		svc.DeleteRule,
		connect.WithSchema(blobServiceDeleteRuleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceCreateObjectHandler := connect.NewUnaryHandler(
		BlobServiceCreateObjectProcedure,
		svc.CreateObject,
		connect.WithSchema(blobServiceCreateObjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceListObjectsHandler := connect.NewUnaryHandler(
		BlobServiceListObjectsProcedure,
		svc.ListObjects,
		connect.WithSchema(blobServiceListObjectsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceDeleteObjectHandler := connect.NewUnaryHandler(
		BlobServiceDeleteObjectProcedure,
		svc.DeleteObject,
		connect.WithSchema(blobServiceDeleteObjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceUpdateObjectHandler := connect.NewUnaryHandler(
		BlobServiceUpdateObjectProcedure,
		svc.UpdateObject,
		connect.WithSchema(blobServiceUpdateObjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/blob.v1.BlobService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BlobServiceCreateBucketProcedure:
			blobServiceCreateBucketHandler.ServeHTTP(w, r)
		case BlobServiceListBucketsProcedure:
			blobServiceListBucketsHandler.ServeHTTP(w, r)
		case BlobServiceDeleteBucketProcedure:
			blobServiceDeleteBucketHandler.ServeHTTP(w, r)
		case BlobServiceUpdateBucketProcedure:
			blobServiceUpdateBucketHandler.ServeHTTP(w, r)
		case BlobServiceCreateRuleProcedure:
			blobServiceCreateRuleHandler.ServeHTTP(w, r)
		case BlobServiceListRulesProcedure:
			blobServiceListRulesHandler.ServeHTTP(w, r)
		case BlobServiceUpdateRuleProcedure:
			blobServiceUpdateRuleHandler.ServeHTTP(w, r)
		case BlobServiceDeleteRuleProcedure:
			blobServiceDeleteRuleHandler.ServeHTTP(w, r)
		case BlobServiceCreateObjectProcedure:
			blobServiceCreateObjectHandler.ServeHTTP(w, r)
		case BlobServiceListObjectsProcedure:
			blobServiceListObjectsHandler.ServeHTTP(w, r)
		case BlobServiceDeleteObjectProcedure:
			blobServiceDeleteObjectHandler.ServeHTTP(w, r)
		case BlobServiceUpdateObjectProcedure:
			blobServiceUpdateObjectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBlobServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBlobServiceHandler struct{}

func (UnimplementedBlobServiceHandler) CreateBucket(context.Context, *connect.Request[v1.CreateBucketRequest]) (*connect.Response[v1.CreateBucketResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blob.v1.BlobService.CreateBucket is not implemented"))
}

func (UnimplementedBlobServiceHandler) ListBuckets(context.Context, *connect.Request[v1.ListBucketsRequest]) (*connect.Response[v1.ListBucketsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blob.v1.BlobService.ListBuckets is not implemented"))
}

func (UnimplementedBlobServiceHandler) DeleteBucket(context.Context, *connect.Request[v1.DeleteBucketRequest]) (*connect.Response[v1.DeleteBucketResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blob.v1.BlobService.DeleteBucket is not implemented"))
}

func (UnimplementedBlobServiceHandler) UpdateBucket(context.Context, *connect.Request[v1.UpdateBucketRequest]) (*connect.Response[v1.UpdateBucketResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blob.v1.BlobService.UpdateBucket is not implemented"))
}

func (UnimplementedBlobServiceHandler) CreateRule(context.Context, *connect.Request[v1.CreateRuleRequest]) (*connect.Response[v1.CreateRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blob.v1.BlobService.CreateRule is not implemented"))
}

func (UnimplementedBlobServiceHandler) ListRules(context.Context, *connect.Request[v1.ListRulesRequest]) (*connect.Response[v1.ListRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blob.v1.BlobService.ListRules is not implemented"))
}

func (UnimplementedBlobServiceHandler) UpdateRule(context.Context, *connect.Request[v1.UpdateRuleRequest]) (*connect.Response[v1.UpdateRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blob.v1.BlobService.UpdateRule is not implemented"))
}

func (UnimplementedBlobServiceHandler) DeleteRule(context.Context, *connect.Request[v1.DeleteRuleRequest]) (*connect.Response[v1.DeleteRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blob.v1.BlobService.DeleteRule is not implemented"))
}

func (UnimplementedBlobServiceHandler) CreateObject(context.Context, *connect.Request[v1.CreateObjectRequest]) (*connect.Response[v1.CreateObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blob.v1.BlobService.CreateObject is not implemented"))
}

func (UnimplementedBlobServiceHandler) ListObjects(context.Context, *connect.Request[v1.ListObjectsRequest]) (*connect.Response[v1.ListObjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blob.v1.BlobService.ListObjects is not implemented"))
}

func (UnimplementedBlobServiceHandler) DeleteObject(context.Context, *connect.Request[v1.DeleteObjectRequest]) (*connect.Response[v1.DeleteObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blob.v1.BlobService.DeleteObject is not implemented"))
}

func (UnimplementedBlobServiceHandler) UpdateObject(context.Context, *connect.Request[v1.UpdateObjectRequest]) (*connect.Response[v1.UpdateObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blob.v1.BlobService.UpdateObject is not implemented"))
}
